/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : PE_LDD.h
**     Project     : ProcessorExpert
**     Version     : Component 01.157, Driver 01.04, CPU db: 3.00.003
**     Date/Time   : 2013-10-30, 17:32, # CodeGen: 0
**     Abstract  : Default PE_LDD.h header file.
**                 MQX BSP provides its own "default" version of PE_LDD.h file
**                 (used as the main include of the PE files).
**                 Once the PE generates the file in <project>/Generated_Code folder,
**                 the PE_LDD.h file should be taken from the new location.
**                 The include search path order will be used to accomplish this behavior.
**
**     Copyright : 1997 - 2013 Freescale Semiconductor, Inc. All Rights Reserved.
**     SOURCE DISTRIBUTION PERMISSIBLE as directed in End User License Agreement.
**
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/
/*!
** @file PE_LDD.h
** @version 01.04
** @brief
**
*/
/*!
**  @addtogroup PE_LDD_module PE_LDD module documentation
**  @{
*/
#ifndef __PE_LDD_H
#define __PE_LDD_H

/* MODULE PE_LDD. */

/* Default version of PE_LDD.h */
#undef PE_LDD_VERSION

#include "PE_Types.h"


/*
** ===================================================================
** Function prototypes
** ===================================================================
*/

/*
** ===================================================================
**     Method      :  LDD_SetClockConfiguration
*/
/*!
**     @brief
**         Changes the clock configuration of all LDD components in a
**         project.
**     @param
**       ClockConfiguration - New CPU clock configuration changed by CPU SetClockConfiguration method.
**     @param
**       ClockConfiguration - New CPU clock configuration changed by CPU SetClockConfiguration method.
*/
/* ===================================================================*/
void LDD_SetClockConfiguration(LDD_TClockConfiguration ClockConfiguration);


/* ============================================================================
   ================== General register manipulating routines ==================
   ============================================================================ */

#define setReg8(Reg, val)                                   ((Reg) = (uint8_t)(val))
#define getReg8(Reg)                                        (Reg)
#define testReg8Bits(Reg, GetMask)                          ((Reg) & (uint8_t)(GetMask))
#define clrReg8Bits(Reg, ClrMask)                           ((Reg) &= (uint8_t)((uint8_t)(~(uint8_t)(ClrMask))))
#define setReg8Bits(Reg, SetMask)                           ((Reg) |= (uint8_t)(SetMask))
#define invertReg8Bits(Reg, InvMask)                        ((Reg) ^= (uint8_t)(InvMask))
#define clrSetReg8Bits(Reg, ClrMask, SetMask)               ((Reg) = (uint8_t)(((Reg) & (uint8_t)(~(uint8_t)(ClrMask))) | (uint8_t)(SetMask)))

#define setReg16(Reg, val)                                  ((Reg) = (uint16_t)(val))
#define getReg16(Reg)                                       (Reg)
#define testReg16Bits(Reg, GetMask)                         ((Reg) & (uint16_t)(GetMask))
#define clrReg16Bits(Reg, ClrMask)                          ((Reg) &= (uint16_t)(~(uint16_t)(ClrMask)))
#define setReg16Bits(Reg, SetMask)                          ((Reg) |= (uint16_t)(SetMask))
#define invertReg16Bits(Reg, InvMask)                       ((Reg) ^= (uint16_t)(InvMask))
#define clrSetReg16Bits(Reg, ClrMask, SetMask)              ((Reg) = (uint16_t)(((Reg) & (uint16_t)(~(uint16_t)(ClrMask))) | (uint16_t)(SetMask)))

#define setReg32(Reg, val)                                  ((Reg) = (uint32_t)(val))
#define getReg32(Reg)                                       (Reg)
#define testReg32Bits(Reg, GetMask)                         ((Reg) & (uint32_t)(GetMask))
#define clrReg32Bits(Reg, ClrMask)                          ((Reg) &= (uint32_t)(~(uint32_t)(ClrMask)))
#define setReg32Bits(Reg, SetMask)                          ((Reg) |= (uint32_t)(SetMask))
#define invertReg32Bits(Reg, InvMask)                       ((Reg) ^= (uint32_t)(InvMask))
#define clrSetReg32Bits(Reg, ClrMask, SetMask)              ((Reg) = (uint32_t)(((Reg) & (uint32_t)(~(uint32_t)(ClrMask))) | (uint32_t)(SetMask)))

/* END PE_LDD. */


#endif

/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.08]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/

